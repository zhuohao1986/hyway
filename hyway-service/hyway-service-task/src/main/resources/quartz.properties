#org.quartz.jobStore.class = org.quartz.simpl.RAMJobStore

#============================================================================
# Configure ThreadPool (与spring整合后，使用spring线程池)
#============================================================================
org.quartz.threadPool.class= org.quartz.simpl.SimpleThreadPool
org.quartz.threadPool.threadCount= 5
org.quartz.threadPool.threadPriority= 5
org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread= true

#============================================================================
# Configure Main Scheduler Properties
# Needed to manage cluster instances
#============================================================================

#默认主机名和时间戳生成实例ID,可以是任何字符串，但对于所有调度程序来说，必须是唯一的
org.quartz.scheduler.instanceId=AUTO
#仅当org.quartz.scheduler.instanceId设置为“AUTO” 时才使用
#org.quartz.scheduler.instanceIdGenerator.class
#可以是任何字符串，并且该值对调度程序本身没有意义，而是作为客户端代码在同一程序中使用多个实例时区分调度程序的机制。如果您正在使用群集功能，则必须对群集中“逻辑上”相同的调度程序的每个实例使用相同的名称。
#org.quartz.scheduler.instanceName=QuartzScheduler 默认
####RMI功能####
#如果您希望Quartz Scheduler通过RMI作为服务器导出本身，则将“rmi.export”标志设置为true。
org.quartz.scheduler.rmi.export = false
#如果要连接（使用）远程服务的调度程序，则将“org.quartz.scheduler.rmi.proxy”标志设置为true。您还必须指定RMI注册表进程的主机和端口 - 通常是“localhost”端口1099。
org.quartz.scheduler.rmi.proxy = false

#org.quartz.scheduler.rmi.registryHost
#org.quartz.scheduler.rmi.registryPort
#============================================================================
# Configure JobStore
#============================================================================

#default config
#org.quartz.jobStore.class= org.quartz.simpl.RAMJobStore
#持久化配置
org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX
#我们仅为数据库制作了特定于数据库的代理
org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate
#以指示JDBCJobStore将JobDataMaps中的所有值都作为字符串，因此可以作为名称 - 值对存储而不是在BLOB列中以其序列化形式存储更多复杂的对象。从长远来看，这是更安全的，因为您避免了将非String类序列化为BLOB的类版本问题。
org.quartz.jobStore.useProperties=true
#数据库表前缀
org.quartz.jobStore.tablePrefix=QRTZ_
#数据库名字
org.quartz.jobStore.dataSource=qzDS
#打开群集功能 ,Clustering目前与JDBC-Jobstore（JobStoreTX或JobStoreCMT）和TerracottaJobStore一起使用。功能包括负载平衡和 job故障转移（如果JobDetail的“请求恢复”标志设置为true）。
org.quartz.jobStore.isClustered=true
#设置此实例“检入”*与群集的其他实例的频率（以毫秒为单位）。影响检测失败实例的速度。
org.quartz.jobStore.clusterCheckinInterval = 5000
#在被认为“失火”之前，调度程序将“容忍”一个Triggers将其下一个启动时间通过的毫秒数。默认值（如果您在配置中未输入此属性）为60000（60秒）。
org.quartz.jobStore.misfireThreshold = 60000
#============================================================================
# Configure Datasources （与spring整合后，使用spring数据源）
#============================================================================
#JDBC驱动
#org.quartz.dataSource.myDS.driver = com.mysql.cj.jdbc.Driver
#org.quartz.dataSource.myDS.URL = jdbc:mysql://62.234.110.157:3306/hyway-qrtz?useUnicode=true&characterEncoding=utf8
#org.quartz.dataSource.myDS.user = hyway
#org.quartz.dataSource.myDS.password = hyway@123#
#org.quartz.dataSource.myDS.maxConnections = 5